# Test cases automatically generated by Pynguin (https://github.com/se2p/pynguin).
# Please check them before you use them.
import pytest
import identifier1 as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "lw~3-"
    identifier_0 = module_0.Identifier()
    var_0 = identifier_0.validateIdentifier(str_0)
    assert var_0 is False
    str_1 = "Bk9\x0c@YOGCr]v"
    set_0 = {str_1}
    module_0.Identifier(*set_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ")-6.ZDU?K"
    identifier_0 = module_0.Identifier()
    list_0 = [str_0, str_0]
    var_0 = identifier_0.validateIdentifier(list_0)
    assert var_0 is False
    module_0.Identifier(*list_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    identifier_0 = module_0.Identifier()
    identifier_1 = module_0.Identifier()
    var_0 = identifier_1.validateIdentifier(dict_0)
    assert var_0 is False
    identifier_2 = module_0.Identifier()
    identifier_2.valid_s(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\t<-tV'_`a"
    module_0.Identifier(*str_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"N\xd6\x80\x8a2%V3w"
    str_0 = "G"
    identifier_0 = module_0.Identifier()
    var_0 = identifier_0.valid_s(str_0)
    assert var_0 is True
    var_0.valid_s(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "chT"
    identifier_0 = module_0.Identifier()
    var_0 = identifier_0.validateIdentifier(str_0)
    assert var_0 is True
    identifier_0.validateIdentifier(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "e"
    identifier_0 = module_0.Identifier()
    var_0 = identifier_0.validateIdentifier(str_0)
    assert var_0 is True
    var_1 = identifier_0.valid_f(str_0)
    assert var_1 is True
    var_0.valid_f(var_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "~;></b"
    identifier_0 = module_0.Identifier()
    identifier_1 = module_0.Identifier()
    var_0 = identifier_0.validateIdentifier(str_0)
    assert var_0 is False
    var_0.valid_f(var_0)
